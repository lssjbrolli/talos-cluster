---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bernd-schorgers/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: audiobookshelf
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  driftDetection:
    mode: warn
  maxHistory: 2
  values:
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/advplyr/audiobookshelf
              tag: 2.21.0@sha256:e9b8f06b77e2fd5b5e5e94b872c16a965923cef8e7441b5bc0abca5c29c0a035
            securityContext:
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 568
              runAsGroup: 568
              fsGroup: 568
              fsGroupChangePolicy: OnRootMismatch
              seccompProfile: { type: RuntimeDefault }
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 150m
                memory: 256Mi
              limits:
                memory: 768Mi
            env:
              AUDIOBOOKSHELF_GID: 568
              AUDIOBOOKSHELF_UID: 568
              TZ: ${CONFIG_TIMEZONE}
              PORT: &port 80
            probes:
              startup:
                enabled: true
                path: "/ping"
                type: HTTP
                port: *port
                spec:
                  initialDelaySeconds: 30
                  failureThreshold: 5
              liveness:
                enabled: true
                path: "/ping"
              readiness:
                enabled: true
                path: "/ping"
    service:
      main:
        controller: main
        type: ClusterIP
        ports:
          http:
            port: *port
    ingress:
      # Configure an Ingress for the main application
      main:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
        hosts:
          - host: &host "abs.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: main
                  port: http
        tls:
          - hosts:
              - *host
            secretName: abs-cert
    persistence:
      config:
        type: persistentVolumeClaim
        existingClaim: audiobookshelf-config
      metadata:
        type: persistentVolumeClaim
        existingClaim: audiobookshelf-metadata
      mcache:
        type: emptyDir
        globalMounts:
          - path: /metadata/cache
      mtmp:
        type: emptyDir
        globalMounts:
          - path: /metadata/tmp
      tmp:
        type: emptyDir
      audiobooks:
        type: nfs
        server: 192.168.1.150
        path: /mnt/storage/media/library/books
